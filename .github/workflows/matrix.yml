name: Build
on:
  push:
  pull_request:
  release:
    types: [published]
  schedule:
    - cron: '30 3 * * 0'

env:
  TAG: ${{ github.ref }}

jobs:
  # Windows Builds on Windows Server 2019
  windows_build:
    name: Windows
    runs-on: windows-2019
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v1

      - name: Setup clcache
        run: pip install clcache

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Retrieve clcache
        uses: actions/cache@v1
        with:
          path: clcache
          key: clcache-windows

      - name: Install OpenSSL
        run: choco install openssl

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 .. -DARCH=default -DBOOST_ROOT="$env:BOOST_ROOT_1_69_0"

      # Build for Windows
      - name: Build
        run: |
          $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild cirquity.sln /p:CLToolExe=clcache.exe /p:CLToolPath=c:\hostedtoolcache\windows\Python\3.7.6\x64\Scripts\ /p:Configuration=Release /p:PlatformToolset=v141 /m

      # Test the crypto
      - name: Test Crypto
        shell: bash
        run: |
          cd build/src/Release
          ./cryptotest.exe

      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf cirquity-${TAG}
          mkdir cirquity-${TAG}
          cp *.exe cirquity-${TAG}/
          cp ../../../LICENSE cirquity-${TAG}/
          7z a cirquity-${LABEL}-${TAG}.zip cirquity-${TAG}/
          echo ::set-output name=binary_path::cirquity-${TAG}
          echo ::set-output name=artifact_name::cirquity-${LABEL}-${TAG}
          echo ::set-output name=file_name::cirquity-${LABEL}-${TAG}.zip


      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.before_deploy.outputs.artifact_name }}
          path: ./build/src/Release/${{ steps.before_deploy.outputs.binary_path }}
